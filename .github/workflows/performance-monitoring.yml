name: Performance Monitoring

on:
  schedule:
    - cron: '0 */6 * * *'  # Every 6 hours
  workflow_dispatch:

jobs:
  load-testing:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        environment: [staging, prod]
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup K6
      run: |
        sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
        echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
        sudo apt-get update
        sudo apt-get install k6

    - name: Run Load Tests
      run: |
        case "${{ matrix.environment }}" in
          staging) 
            export BASE_URL="https://staging-api.gep.com"
            export VUS=10
            export DURATION="2m"
            ;;
          prod) 
            export BASE_URL="https://api.gep.com"
            export VUS=25
            export DURATION="3m"
            ;;
        esac
        
        k6 run --vus $VUS --duration $DURATION \
          --env BASE_URL=$BASE_URL \
          --out json=load-test-results.json \
          scripts/performance/load-test.js

    - name: Upload Results
      uses: actions/upload-artifact@v4
      with:
        name: load-test-results-${{ matrix.environment }}
        path: load-test-results.json

  lighthouse-audit:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        environment: [staging, prod]
    steps:
    - name: Lighthouse Performance Audit
      run: |
        case "${{ matrix.environment }}" in
          staging) URL="https://staging.gep.com" ;;
          prod) URL="https://gep.com" ;;
        esac
        
        npm install -g lighthouse
        lighthouse $URL \
          --chrome-flags="--headless --no-sandbox" \
          --output=json \
          --output-path=./lighthouse-${{ matrix.environment }}.json \
          --only-categories=performance

    - name: Check Performance Score
      run: |
        performance_score=$(jq '.categories.performance.score * 100' lighthouse-${{ matrix.environment }}.json)
        echo "Performance Score: $performance_score"
        
        if (( $(echo "$performance_score < 80" | bc -l) )); then
          echo "::warning::Performance score below threshold: $performance_score"
        fi

    - name: Upload Lighthouse Report
      uses: actions/upload-artifact@v4
      with:
        name: lighthouse-report-${{ matrix.environment }}
        path: lighthouse-${{ matrix.environment }}.json

  database-performance:
    runs-on: ubuntu-latest
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Check RDS Performance
      run: |
        # Get RDS performance metrics
        aws cloudwatch get-metric-statistics \
          --namespace AWS/RDS \
          --metric-name CPUUtilization \
          --dimensions Name=DBInstanceIdentifier,Value=gep-prod-db \
          --start-time $(date -u -d '1 hour ago' +%Y-%m-%dT%H:%M:%S) \
          --end-time $(date -u +%Y-%m-%dT%H:%M:%S) \
          --period 300 \
          --statistics Average

  notify-performance-issues:
    needs: [load-testing, lighthouse-audit, database-performance]
    if: failure()
    runs-on: ubuntu-latest
    steps:
    - name: Slack Performance Alert
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        channel: '#performance'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        custom_payload: |
          {
            "text": "⚠️ Performance Issues Detected",
            "attachments": [{
              "color": "warning",
              "fields": [{
                "title": "Repository",
                "value": "${{ github.repository }}",
                "short": true
              }, {
                "title": "Test Date",
                "value": "$(date)",
                "short": true
              }]
            }]
          }