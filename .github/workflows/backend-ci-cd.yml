name: Backend CI/CD Pipeline

on:
  repository_dispatch:
    types: [backend-deployment]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'dev'
        type: choice
        options: [dev, staging, prod]

env:
  ENVIRONMENT: ${{ github.event.client_payload.environment || inputs.environment }}
  BACKEND_REPO: ${{ github.event.client_payload.repository }}
  COMMIT_SHA: ${{ github.event.client_payload.sha }}
  ECR_REGISTRY: ${{ secrets.ECR_REGISTRY_URL }}

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [user-service, event-service, notification-service, gateway-service]
    steps:
    - name: Checkout Backend Code
      uses: actions/checkout@v4
      with:
        repository: ${{ env.BACKEND_REPO }}
        ref: ${{ env.COMMIT_SHA }}
        token: ${{ secrets.BACKEND_REPO_TOKEN }}

    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven

    - name: Build and Test
      run: |
        cd ${{ matrix.service }}
        mvn clean test package -DskipTests

    - name: Security Scan
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '${{ matrix.service }}'

  build-and-push:
    needs: build-and-test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [user-service, event-service, notification-service, gateway-service]
    steps:
    - name: Checkout Backend Code
      uses: actions/checkout@v4
      with:
        repository: ${{ env.BACKEND_REPO }}
        ref: ${{ env.COMMIT_SHA }}
        token: ${{ secrets.BACKEND_REPO_TOKEN }}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Login to ECR
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build and Push Docker Image
      run: |
        cd ${{ matrix.service }}
        docker build -t $ECR_REGISTRY/gep-${{ matrix.service }}:${{ env.ENVIRONMENT }}-${{ env.COMMIT_SHA }} .
        docker push $ECR_REGISTRY/gep-${{ matrix.service }}:${{ env.ENVIRONMENT }}-${{ env.COMMIT_SHA }}

  deploy-to-ecs:
    needs: build-and-push
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [user-service, event-service, notification-service, gateway-service]
    steps:
    - name: Checkout DevOps Config
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Update ECS Task Definition
      run: |
        jq --arg IMAGE "$ECR_REGISTRY/gep-${{ matrix.service }}:${{ env.ENVIRONMENT }}-${{ env.COMMIT_SHA }}" \
           '.containerDefinitions[0].image = $IMAGE' \
           ecs/task-definitions/${{ matrix.service }}.json > /tmp/task-def.json

    - name: Deploy to ECS
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: /tmp/task-def.json
        service: gep-${{ matrix.service }}-${{ env.ENVIRONMENT }}
        cluster: gep-cluster-${{ env.ENVIRONMENT }}
        wait-for-service-stability: true

  notify:
    needs: [build-and-test, build-and-push, deploy-to-ecs]
    if: always()
    runs-on: ubuntu-latest
    steps:
    - name: Slack Notification
      uses: 8398a7/action-slack@v3
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      with:
        status: custom
        custom_payload: |
          {
            "text": "Backend Deployment ${{ contains(needs.*.result, 'failure') && 'Failed ❌' || 'Succeeded ✅' }}",
            "attachments": [{
              "color": "${{ contains(needs.*.result, 'failure') && 'danger' || 'good' }}",
              "fields": [{
                "title": "Repository",
                "value": "gep-backend",
                "short": true
              }, {
                "title": "Environment",
                "value": "${{ env.ENVIRONMENT }}",
                "short": true
              }, {
                "title": "Branch",
                "value": "${{ github.event.client_payload.branch || 'manual' }}",
                "short": true
              }, {
                "title": "Commit",
                "value": "${{ env.COMMIT_SHA }}",
                "short": true
              }, {
                "title": "Triggered By",
                "value": "${{ github.actor }}",
                "short": true
              }]
            }]
          }