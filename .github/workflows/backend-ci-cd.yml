name: Backend CI/CD Pipeline

on:
  repository_dispatch:
    types: [backend-deployment]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: dev
        type: choice
        options:
          - dev
          - staging
          - prod
      services:
        description: 'Services to deploy (JSON array)'
        required: false
        default: '["auth-service", "notification-service"]'
        type: string

env:
  ENVIRONMENT: "${{ github.event.client_payload.environment || inputs.environment }}"
  BACKEND_REPO: "${{ github.event.client_payload.repository || 'AmaliTech-Training-Academy/gep-backend' }}"
  COMMIT_SHA: "${{ github.event.client_payload.sha || github.sha }}"
  ECR_REGISTRY: "${{ secrets.ECR_REGISTRY_URL }}"
  SERVICES_TO_DEPLOY: "${{ github.event.client_payload.services && toJson(github.event.client_payload.services) || inputs.services }}"

jobs:
  prepare:
    runs-on: [self-hosted, backend]
    outputs:
      services: ${{ steps.services.outputs.matrix }}
    steps:
      - name: Checkout Backend Code
        uses: actions/checkout@v4
        with:
          repository: ${{ env.BACKEND_REPO }}
          ref: ${{ env.COMMIT_SHA }}
          token: ${{ secrets.BACKEND_REPO_TOKEN }}

      - name: List Repository Contents
        run: |
          echo "Repository contents:"
          ls -la
          echo "Looking for service directories..."
          find . -maxdepth 2 -type d -name "*service*" || echo "No service directories found"

      - name: Discover Available Services
        id: services
        run: |
          # Find all service folders (api-gateway + *-service)
          SERVICES=$(find services/ -maxdepth 1 -type d \( -name "*-service" -o -name "api-gateway" \) | sed 's|services/||' | sort)
          
          # For now, restrict to only auth-service and notification-service
          echo 'matrix=["auth-service","notification-service"]' >> "$GITHUB_OUTPUT"
          echo "Using limited service list: auth-service, notification-service"
          
          # Debug output
          echo "Matrix will be:"
          cat "$GITHUB_OUTPUT"

  build-and-test:
    needs: prepare
    runs-on: [self-hosted, backend]
    strategy:
      matrix:
        service: ${{ fromJson(needs.prepare.outputs.services) }}
    steps:
      - name: Checkout Backend Code
        uses: actions/checkout@v4
        with:
          repository: ${{ env.BACKEND_REPO }}
          ref: ${{ env.COMMIT_SHA }}
          token: ${{ secrets.BACKEND_REPO_TOKEN }}

      - name: Verify Java Environment
        run: |
          echo "Java version:"
          java --version
          echo "JAVA_HOME: $JAVA_HOME"
          echo "Maven version:"
          mvn --version
          export JAVA_HOME=$(readlink -f /usr/bin/java | sed "s:bin/java::")
          echo "Updated JAVA_HOME: $JAVA_HOME"

      - name: Debug Service Path
        run: |
          echo "Processing service: ${{ matrix.service }}"
          echo "Looking for directory: services/${{ matrix.service }}"
          ls -la services/ || echo "services/ directory not found"
          ls -la services/${{ matrix.service }} || echo "services/${{ matrix.service }} not found"

      - name: Build and Test Service
        run: |
          export JAVA_HOME=/usr/lib/jvm/java-21-openjdk-amd64
          export MAVEN_OPTS="-Dmaven.repo.local=$HOME/.m2/repository"
          cd services/${{ matrix.service }}
          mvn clean package -DskipTests

      - name: Security Scan (Trivy)
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: 'services/${{ matrix.service }}'

  build-and-push:
    needs: [prepare, build-and-test]
    runs-on: [self-hosted, backend]
    strategy:
      matrix:
        service: ${{ fromJson(needs.prepare.outputs.services) }}
    steps:
      - name: Checkout Backend Code
        uses: actions/checkout@v4
        with:
          repository: ${{ env.BACKEND_REPO }}
          ref: ${{ env.COMMIT_SHA }}
          token: ${{ secrets.BACKEND_REPO_TOKEN }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1

      - name: Login to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and Push Docker Image
        run: |
          cd services/${{ matrix.service }}
          REGISTRY="${{ steps.login-ecr.outputs.registry }}"
          IMAGE="$REGISTRY/event-planner-${{ env.ENVIRONMENT }}-${{ matrix.service }}:${{ env.COMMIT_SHA }}"
          echo "Full image name: $IMAGE"
          docker build -t "$IMAGE" .
          docker push "$IMAGE"

  deploy-to-ecs:
    needs: [prepare, build-and-push]
    runs-on: [self-hosted, backend]
    strategy:
      matrix:
        service: ${{ fromJson(needs.prepare.outputs.services) }}
    steps:
      - name: Checkout DevOps Config
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1

      - name: Login to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Check Task Definition
        run: |
          echo "Looking for task definition file..."
          find . -name "*${{ matrix.service }}*" -type f || echo "No files found for ${{ matrix.service }}"
          ls -la ecs/ || echo "ecs/ directory not found"
          ls -la ecs/task-definitions/ || echo "ecs/task-definitions/ directory not found"

      - name: Update ECS Task Definition
        run: |
          REGISTRY="${{ steps.login-ecr.outputs.registry }}"
          IMAGE="$REGISTRY/event-planner-${{ env.ENVIRONMENT }}-${{ matrix.service }}:${{ env.COMMIT_SHA }}"
          echo "Using image: $IMAGE"
          
          if [ ! -f "ecs/task-definitions/${{ matrix.service }}.json" ]; then
            echo "Task definition file not found: ecs/task-definitions/${{ matrix.service }}.json"
            echo "Available files:"
            find . -name "*.json" -type f || echo "No JSON files found"
            exit 1
          fi
          
          echo "Inspecting task definition structure:"
          jq '.' ecs/task-definitions/${{ matrix.service }}.json | head -20
          
          # Check if it's a task definition object or array
          if jq -e '.containerDefinitions' ecs/task-definitions/${{ matrix.service }}.json > /dev/null; then
            # Standard task definition format
            jq --arg IMAGE "$IMAGE" \
              '.containerDefinitions[0].image = $IMAGE' \
              ecs/task-definitions/${{ matrix.service }}.json > /tmp/task-def.json
          else
            # Might be an array or different format
            jq --arg IMAGE "$IMAGE" \
              '.[0].image = $IMAGE' \
              ecs/task-definitions/${{ matrix.service }}.json > /tmp/task-def.json
          fi

      - name: Deploy to ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: /tmp/task-def.json
          service: gep-${{ matrix.service }}-${{ env.ENVIRONMENT }}
          cluster: gep-cluster-${{ env.ENVIRONMENT }}
          wait-for-service-stability: true

  notify:
    needs: [prepare, deploy-to-ecs]
    if: always()
    runs-on: [self-hosted, backend]
    steps:
      - name: Slack Notification
        uses: 8398a7/action-slack@v3
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        with:
          status: custom
          custom_payload: |
            {
              "text": "Backend Deployment ${{ contains(needs.*.result, 'failure') && 'Failed ❌' || 'Succeeded ✅' }}",
              "attachments": [
                {
                  "color": "${{ contains(needs.*.result, 'failure') && 'danger' || 'good' }}",
                  "fields": [
                    {
                      "title": "Repository",
                      "value": "gep-backend",
                      "short": true
                    },
                    {
                      "title": "Environment",
                      "value": "${{ env.ENVIRONMENT }}",
                      "short": true
                    },
                    {
                      "title": "Services",
                      "value": "${{ env.SERVICES_TO_DEPLOY }}",
                      "short": true
                    },
                    {
                      "title": "Commit SHA",
                      "value": "${{ env.COMMIT_SHA }}",
                      "short": true
                    }
                  ]
                }
              ]
            }