name: Backend CI/CD Pipeline

on:
  repository_dispatch:
    types: [backend-deployment]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'dev'
        type: choice
        options: [dev, staging, prod]
      services:
        description: 'Services to deploy (JSON array)'
        required: false
        default: '["user-service", "event-service", "notification-service", "gateway-service"]'

env:
  ENVIRONMENT: ${{ github.event.client_payload.environment || inputs.environment }}
  BACKEND_REPO: ${{ github.event.client_payload.repository || 'your-org/gep-backend' }}
  COMMIT_SHA: ${{ github.event.client_payload.sha || github.sha }}
  ECR_REGISTRY: ${{ secrets.ECR_REGISTRY_URL }}
  SERVICES_TO_DEPLOY: ${{ github.event.client_payload.services || inputs.services }}

jobs:
  prepare:
    runs-on: [self-hosted, backend]
    outputs:
      services: ${{ steps.services.outputs.matrix }}
    steps:
    - name: Checkout Backend Code
      uses: actions/checkout@v4
      with:
        repository: ${{ env.BACKEND_REPO }}
        ref: ${{ env.COMMIT_SHA }}
        token: ${{ secrets.BACKEND_REPO_TOKEN }}
      if: github.event_name == 'repository_dispatch'

    - name: Discover Available Services
      id: services
      run: |
        if [ "${{ github.event_name }}" == "repository_dispatch" ]; then
          # Get services from backend repo directories
          AVAILABLE_SERVICES=$(find . -maxdepth 1 -type d -name "*-service" | sed 's|./||' | jq -R -s -c 'split("\n")[:-1]')
          echo "matrix=$AVAILABLE_SERVICES" >> $GITHUB_OUTPUT
        else
          # Use provided services for manual dispatch
          echo "matrix=${{ env.SERVICES_TO_DEPLOY }}" >> $GITHUB_OUTPUT
        fi

  build-and-test:
    needs: prepare
    runs-on: [self-hosted, backend]
    if: github.event_name == 'repository_dispatch'
    strategy:
      matrix:
        service: ${{ fromJson(needs.prepare.outputs.services) }}
    steps:
    - name: Checkout Backend Code
      uses: actions/checkout@v4
      with:
        repository: ${{ env.BACKEND_REPO }}
        ref: ${{ env.COMMIT_SHA }}
        token: ${{ secrets.BACKEND_REPO_TOKEN }}

    - name: Build and Test
      run: |
        cd ${{ matrix.service }}
        mvn clean test package -DskipTests

    - name: Security Scan
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '${{ matrix.service }}'

  build-and-push:
    needs: [prepare, build-and-test]
    runs-on: [self-hosted, backend]
    if: github.event_name == 'repository_dispatch'
    strategy:
      matrix:
        service: ${{ fromJson(needs.prepare.outputs.services) }}
    steps:
    - name: Checkout Backend Code
      uses: actions/checkout@v4
      with:
        repository: ${{ env.BACKEND_REPO }}
        ref: ${{ env.COMMIT_SHA }}
        token: ${{ secrets.BACKEND_REPO_TOKEN }}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-west-1

    - name: Login to ECR
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build and Push Docker Image
      run: |
        cd ${{ matrix.service }}
        docker build -t $ECR_REGISTRY/event-planner-${{ env.ENVIRONMENT }}-${{ matrix.service }}:${{ env.COMMIT_SHA }} .
        docker push $ECR_REGISTRY/event-planner-${{ env.ENVIRONMENT }}-${{ matrix.service }}:${{ env.COMMIT_SHA }}

  deploy-to-ecs:
    needs: [prepare]
    runs-on: [self-hosted, backend]
    strategy:
      matrix:
        service: ${{ fromJson(needs.prepare.outputs.services) }}
    steps:
    - name: Checkout DevOps Config
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-west-1

    - name: Update ECS Task Definition
      run: |
        jq --arg IMAGE "$ECR_REGISTRY/event-planner-${{ env.ENVIRONMENT }}-${{ matrix.service }}:${{ env.COMMIT_SHA }}" \
           '.containerDefinitions[0].image = $IMAGE' \
           ecs/task-definitions/${{ matrix.service }}.json > /tmp/task-def.json

    - name: Deploy to ECS
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: /tmp/task-def.json
        service: gep-${{ matrix.service }}-${{ env.ENVIRONMENT }}
        cluster: gep-cluster-${{ env.ENVIRONMENT }}
        wait-for-service-stability: true
      if: github.event_name == 'repository_dispatch'

  notify:
    needs: [prepare, deploy-to-ecs]
    if: always()
    runs-on: [self-hosted, backend]
    steps:
    - name: Slack Notification
      uses: 8398a7/action-slack@v3
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      with:
        status: custom
        custom_payload: |
          {
            "text": "Backend Deployment ${{ contains(needs.*.result, 'failure') && 'Failed ❌' || 'Succeeded ✅' }}",
            "attachments": [{
              "color": "${{ contains(needs.*.result, 'failure') && 'danger' || 'good' }}",
              "fields": [{
                "title": "Repository",
                "value": "gep-backend",
                "short": true
              }, {
                "title": "Environment",
                "value": "${{ env.ENVIRONMENT }}",
                "short": true
              }, {
                "title": "Services",
                "value": "${{ env.SERVICES_TO_DEPLOY }}",
                "short": true
              }, {
                "title": "Commit",
                "value": "${{ env.COMMIT_SHA }}",
                "short": true
              }]
            }]
          }