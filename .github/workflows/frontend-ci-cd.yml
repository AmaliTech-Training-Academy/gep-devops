name: Frontend CI/CD Pipeline

on:
  repository_dispatch:
    types: [frontend-deployment]
  workflow_dispatch:
    inputs:
      environment:
        description: 'The environment to deploy'
        required: true
        default: 'dev'
        type: choice
        options: [dev, staging, prod]

env:
  ENVIRONMENT: ${{ github.event.client_payload.environment || inputs.environment }}
  FRONTEND_REPO: ${{ github.event.client_payload.repository }}
  COMMIT_SHA: ${{ github.event.client_payload.sha }}

jobs:
  build-and-test:
    runs-on: [self-hosted, frontend]
    steps:
    - name: Checkout Frontend Code
      uses: actions/checkout@v4
      with:
        repository: ${{ env.FRONTEND_REPO }}
        ref: ${{ env.COMMIT_SHA }}
        token: ${{ secrets.FRONTEND_REPO_TOKEN }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        # Remove cache since we're working with external repo
        # cache: 'npm'

    - name: Install and Test
      run: |
        # Use npm ci if package-lock.json exists, otherwise use npm install
        if [ -f "package-lock.json" ]; then
          echo "üì¶ Installing with npm ci..."
          npm ci
        else
          echo "üì¶ No package-lock.json found, using npm install..."
          npm install
        fi
        
        # Check if lint script exists before running
        if npm run | grep -q "lint"; then
          echo "‚úÖ Running lint script..."
          npm run lint
        else
          echo "‚ö†Ô∏è Lint script not found, skipping..."
        fi
        
        # Check if test:ci script exists before running
        if npm run | grep -q "test:ci"; then
          echo "‚úÖ Running test:ci script..."
          npm run test:ci
        elif npm run | grep -q "test"; then
          echo "‚úÖ Running test script in headless mode..."
          npm run test -- --watch=false --browsers=ChromeHeadless
        else
          echo "‚ö†Ô∏è No test script found, skipping..."
        fi
        
        # Check if build script exists for environment
        if npm run | grep -q "build:${{ env.ENVIRONMENT }}"; then
          echo "‚úÖ Running build:${{ env.ENVIRONMENT }} script..."
          npm run build:${{ env.ENVIRONMENT }}
        elif npm run | grep -q "build"; then
          echo "‚úÖ Running build script..."
          npm run build
        else
          echo "‚ùå No build script found!"
          exit 1
        fi

    - name: Security Audit
      run: |
        echo "üîç Running security audit..."
        npm audit --audit-level=high || echo "‚ö†Ô∏è npm audit found issues but continuing..."
        
        # Check if Snyk token is available before running
        if [ -n "${{ secrets.SNYK_TOKEN }}" ]; then
          echo "‚úÖ Running Snyk security scan..."
          npx snyk test || echo "‚ö†Ô∏è Snyk found issues but continuing..."
        else
          echo "‚ö†Ô∏è SNYK_TOKEN not configured, skipping Snyk scan..."
        fi
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist-${{ env.ENVIRONMENT }}
        path: dist/

  deploy-to-s3:
    needs: build-and-test
    runs-on: [self-hosted, frontend]
    steps:
    - name: Download Build Artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist-${{ env.ENVIRONMENT }}
        path: dist/

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Deploy to S3
      run: |
        case "${{ env.ENVIRONMENT }}" in
          dev) BUCKET="${{ secrets.S3_BUCKET_DEV }}" ;;
          staging) BUCKET="${{ secrets.S3_BUCKET_STAGING }}" ;;
          prod) BUCKET="${{ secrets.S3_BUCKET_PROD }}" ;;
        esac
        aws s3 sync dist/ s3://$BUCKET --delete

    - name: Invalidate CloudFront
      run: |
        case "${{ env.ENVIRONMENT }}" in
          dev) DISTRIBUTION="${{ secrets.CLOUDFRONT_DISTRIBUTION_DEV }}" ;;
          staging) DISTRIBUTION="${{ secrets.CLOUDFRONT_DISTRIBUTION_STAGING }}" ;;
          prod) DISTRIBUTION="${{ secrets.CLOUDFRONT_DISTRIBUTION_PROD }}" ;;
        esac
        aws cloudfront create-invalidation --distribution-id $DISTRIBUTION --paths "/*"

  performance-audit:
    needs: deploy-to-s3
    runs-on: [self-hosted, frontend]
    if: github.event.client_payload.environment != 'dev'
    steps:
    - name: Lighthouse Audit
      run: |
        case "${{ env.ENVIRONMENT }}" in
          staging) URL="https://staging.gep.com" ;;
          prod) URL="https://gep.com" ;;
        esac
        npm install -g lighthouse
        lighthouse $URL --chrome-flags="--headless" --output=json --output-path=lighthouse-report.json

    - name: Upload Lighthouse Report
      uses: actions/upload-artifact@v4
      with:
        name: lighthouse-report-${{ env.ENVIRONMENT }}
        path: lighthouse-report.json

  notify:
    needs: [build-and-test, deploy-to-s3, performance-audit]
    if: always()
    runs-on: [self-hosted, frontend]
    steps:
    - name: Checkout for notification context
      uses: actions/checkout@v4
      with:
        repository: ${{ env.FRONTEND_REPO }}
        ref: ${{ env.COMMIT_SHA }}
        token: ${{ secrets.FRONTEND_REPO_TOKEN }}
        fetch-depth: 0

    - name: Get commit details
      id: commit_info
      run: |
        COMMIT_MSG=$(git log -1 --pretty=%B)
        COMMIT_AUTHOR=$(git log -1 --pretty=format:'%an')
        COMMIT_TIME=$(git log -1 --pretty=format:'%ci')
        
        # Escape special characters for JSON
        COMMIT_MSG=$(echo "$COMMIT_MSG" | head -n 1 | sed 's/"/\\"/g')
        
        echo "message=$COMMIT_MSG" >> $GITHUB_OUTPUT
        echo "author=$COMMIT_AUTHOR" >> $GITHUB_OUTPUT
        echo "time=$COMMIT_TIME" >> $GITHUB_OUTPUT

    - name: Get job durations
      id: durations
      run: |
        echo "workflow_url=${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" >> $GITHUB_OUTPUT

    - name: Download Lighthouse Report (if exists)
      if: needs.performance-audit.result == 'success'
      uses: actions/download-artifact@v4
      continue-on-error: true
      with:
        name: lighthouse-report-${{ env.ENVIRONMENT }}
        path: ./reports

    - name: Parse Lighthouse Scores
      id: lighthouse
      if: needs.performance-audit.result == 'success'
      run: |
        if [ -f "./reports/lighthouse-report.json" ]; then
          PERFORMANCE=$(jq -r '.categories.performance.score * 100 | floor' ./reports/lighthouse-report.json)
          ACCESSIBILITY=$(jq -r '.categories.accessibility.score * 100 | floor' ./reports/lighthouse-report.json)
          BEST_PRACTICES=$(jq -r '.categories["best-practices"].score * 100 | floor' ./reports/lighthouse-report.json)
          SEO=$(jq -r '.categories.seo.score * 100 | floor' ./reports/lighthouse-report.json)
          
          echo "performance=$PERFORMANCE" >> $GITHUB_OUTPUT
          echo "accessibility=$ACCESSIBILITY" >> $GITHUB_OUTPUT
          echo "best_practices=$BEST_PRACTICES" >> $GITHUB_OUTPUT
          echo "seo=$SEO" >> $GITHUB_OUTPUT
          echo "has_scores=true" >> $GITHUB_OUTPUT
        else
          echo "has_scores=false" >> $GITHUB_OUTPUT
        fi

    - name: Determine overall status
      id: status
      run: |
        if [[ "${{ contains(needs.*.result, 'failure') }}" == "true" ]]; then
          echo "result=failure" >> $GITHUB_OUTPUT
          echo "emoji=‚ùå" >> $GITHUB_OUTPUT
          echo "color=danger" >> $GITHUB_OUTPUT
        elif [[ "${{ contains(needs.*.result, 'cancelled') }}" == "true" ]]; then
          echo "result=cancelled" >> $GITHUB_OUTPUT
          echo "emoji=‚ö†Ô∏è" >> $GITHUB_OUTPUT
          echo "color=warning" >> $GITHUB_OUTPUT
        else
          echo "result=success" >> $GITHUB_OUTPUT
          echo "emoji=‚úÖ" >> $GITHUB_OUTPUT
          echo "color=good" >> $GITHUB_OUTPUT
        fi

    - name: Enhanced Slack Notification
      uses: 8398a7/action-slack@v3
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      with:
        status: custom
        custom_payload: |
          {
            "text": "Frontend Deployment ${{ steps.status.outputs.result == 'success' && 'Succeeded ‚úÖ' || steps.status.outputs.result == 'cancelled' && 'Cancelled ‚ö†Ô∏è' || 'Failed ‚ùå' }}",
            "blocks": [
              {
                "type": "header",
                "text": {
                  "type": "plain_text",
                  "text": "${{ steps.status.outputs.emoji }} Frontend Deployment ${{ steps.status.outputs.result == 'success' && 'Succeeded' || steps.status.outputs.result == 'cancelled' && 'Cancelled' || 'Failed' }}",
                  "emoji": true
                }
              },
              {
                "type": "section",
                "fields": [
                  {
                    "type": "mrkdwn",
                    "text": "*Environment:*\n`${{ env.ENVIRONMENT }}`"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*Repository:*\nevent-planner-frontend"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*Branch:*\n${{ github.event.client_payload.branch || 'manual' }}"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*Triggered By:*\n${{ github.actor }}"
                  }
                ]
              },
              {
                "type": "section",
                "fields": [
                  {
                    "type": "mrkdwn",
                    "text": "*Commit:*\n<${{ github.server_url }}/${{ env.FRONTEND_REPO }}/commit/${{ env.COMMIT_SHA }}|`${{ env.COMMIT_SHA }}`>"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*Author:*\n${{ steps.commit_info.outputs.author }}"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*Commit Message:*\n${{ steps.commit_info.outputs.message }}"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*Commit Time:*\n${{ steps.commit_info.outputs.time }}"
                  }
                ]
              },
              {
                "type": "divider"
              },
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "*Job Status:*"
                },
                "fields": [
                  {
                    "type": "mrkdwn",
                    "text": "${{ needs.build-and-test.result == 'success' && '‚úÖ' || needs.build-and-test.result == 'failure' && '‚ùå' || '‚ö†Ô∏è' }} Build & Test"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "${{ needs.deploy-to-s3.result == 'success' && '‚úÖ' || needs.deploy-to-s3.result == 'failure' && '‚ùå' || '‚ö†Ô∏è' }} Deploy to S3"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "${{ needs.performance-audit.result == 'success' && '‚úÖ' || needs.performance-audit.result == 'failure' && '‚ùå' || needs.performance-audit.result == 'skipped' && '‚è≠Ô∏è' || '‚ö†Ô∏è' }} Performance Audit"
                  }
                ]
              }
              ${{ steps.lighthouse.outputs.has_scores == 'true' && format(',{{
                "type": "divider"
              }},{{
                "type": "section",
                "text": {{
                  "type": "mrkdwn",
                  "text": "*Lighthouse Scores:*"
                }},
                "fields": [
                  {{
                    "type": "mrkdwn",
                    "text": "üöÄ *Performance:* {0}/100"
                  }},
                  {{
                    "type": "mrkdwn",
                    "text": "‚ôø *Accessibility:* {1}/100"
                  }},
                  {{
                    "type": "mrkdwn",
                    "text": "‚ú® *Best Practices:* {2}/100"
                  }},
                  {{
                    "type": "mrkdwn",
                    "text": "üîç *SEO:* {3}/100"
                  }}
                ]
              }}', steps.lighthouse.outputs.performance, steps.lighthouse.outputs.accessibility, steps.lighthouse.outputs.best_practices, steps.lighthouse.outputs.seo) || '' }},
              {
                "type": "divider"
              },
              {
                "type": "section",
                "fields": [
                  {
                    "type": "mrkdwn",
                    "text": "*Deployment URL:*\n${{ env.ENVIRONMENT == 'prod' && 'https://gep.com' || env.ENVIRONMENT == 'staging' && 'https://staging.gep.com' || 'https://dev.gep.com' }}"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*Workflow Run:*\n<${{ steps.durations.outputs.workflow_url }}|View Details>"
                  }
                ]
              },
              {
                "type": "context",
                "elements": [
                  {
                    "type": "mrkdwn",
                    "text": "‚è±Ô∏è Workflow completed at <!date^${{ github.event.repository.updated_at }}^{date_short_pretty} {time}|unknown time>"
                  }
                ]
              }
            ]
          }