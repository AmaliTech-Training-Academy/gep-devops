name: Frontend CI/CD Pipeline

on:
  repository_dispatch:
    types: [frontend-deployment]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'dev'
        type: choice
        options: [dev, staging, prod]

env:
  ENVIRONMENT: ${{ github.event.client_payload.environment || inputs.environment }}
  FRONTEND_REPO: ${{ github.event.client_payload.repository }}
  COMMIT_SHA: ${{ github.event.client_payload.sha }}

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Frontend Code
      uses: actions/checkout@v4
      with:
        repository: ${{ env.FRONTEND_REPO }}
        ref: ${{ env.COMMIT_SHA }}
        token: ${{ secrets.FRONTEND_REPO_TOKEN }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install and Test
      run: |
        npm ci
        npm run lint
        npm run test:ci
        npm run build:${{ env.ENVIRONMENT }}

    - name: Security Audit
      run: |
        npm audit --audit-level=high
        npx snyk test
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist-${{ env.ENVIRONMENT }}
        path: dist/

  deploy-to-s3:
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
    - name: Download Build Artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist-${{ env.ENVIRONMENT }}
        path: dist/

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Deploy to S3
      run: |
        case "${{ env.ENVIRONMENT }}" in
          dev) BUCKET="${{ secrets.S3_BUCKET_DEV }}" ;;
          staging) BUCKET="${{ secrets.S3_BUCKET_STAGING }}" ;;
          prod) BUCKET="${{ secrets.S3_BUCKET_PROD }}" ;;
        esac
        aws s3 sync dist/ s3://$BUCKET --delete

    - name: Invalidate CloudFront
      run: |
        case "${{ env.ENVIRONMENT }}" in
          dev) DISTRIBUTION="${{ secrets.CLOUDFRONT_DISTRIBUTION_DEV }}" ;;
          staging) DISTRIBUTION="${{ secrets.CLOUDFRONT_DISTRIBUTION_STAGING }}" ;;
          prod) DISTRIBUTION="${{ secrets.CLOUDFRONT_DISTRIBUTION_PROD }}" ;;
        esac
        aws cloudfront create-invalidation --distribution-id $DISTRIBUTION --paths "/*"

  performance-audit:
    needs: deploy-to-s3
    runs-on: ubuntu-latest
    if: github.event.client_payload.environment != 'dev'
    steps:
    - name: Lighthouse Audit
      run: |
        case "${{ env.ENVIRONMENT }}" in
          staging) URL="https://staging.gep.com" ;;
          prod) URL="https://gep.com" ;;
        esac
        npm install -g lighthouse
        lighthouse $URL --chrome-flags="--headless" --output=json --output-path=lighthouse-report.json

    - name: Upload Lighthouse Report
      uses: actions/upload-artifact@v4
      with:
        name: lighthouse-report-${{ env.ENVIRONMENT }}
        path: lighthouse-report.json

  notify:
    needs: [build-and-test, deploy-to-s3, performance-audit]
    if: always()
    runs-on: ubuntu-latest
    steps:
    - name: Slack Notification
      uses: 8398a7/action-slack@v3
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      with:
        status: ${{ contains(needs.*.result, 'failure') && 'failure' || 'success' }}
        channel: '#deployments'
        custom_payload: |
          {
            "text": "Frontend Deployment ${{ contains(needs.*.result, 'failure') && 'Failed ❌' || 'Succeeded ✅' }}",
            "attachments": [{
              "color": "${{ contains(needs.*.result, 'failure') && 'danger' || 'good' }}",
              "fields": [{
                "title": "Repository",
                "value": "event-planner-frontend",
                "short": true
              }, {
                "title": "Environment", 
                "value": "${{ env.ENVIRONMENT }}",
                "short": true
              }, {
                "title": "Branch",
                "value": "${{ github.event.client_payload.branch || 'manual' }}",
                "short": true
              }, {
                "title": "Commit",
                "value": "${{ env.COMMIT_SHA }}",
                "short": true
              }]
            }]
          }